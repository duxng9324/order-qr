"use client";

import { useEffect, useState } from "react";
import { getOrders } from "@/composable/services/orderServices";
import { RefreshCw, FileDown } from "lucide-react";
import { useNotification } from "@/components/useNotification";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

export default function StatisticsPage() {
  const [orders, setOrders] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { showNotification, NotificationComponent } = useNotification();

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token") || "";
      const data = await getOrders(token);
      setOrders(data);
    } catch {
      showNotification("L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng", "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  // üßÆ T√≠nh t·ªïng ti·ªÅn m·ªói ƒë∆°n
  const calculateTotal = (order: any) => {
    if (!order.items || order.items.length === 0) return 0;
    return order.items.reduce((sum: number, item: any) => {
      const price = item.menuItem?.price || 0;
      const quantity = item.quantity || 0;
      return sum + price * quantity;
    }, 0);
  };

  // üßæ Xu·∫•t Excel
  const exportToExcel = () => {
    if (orders.length === 0) {
      showNotification("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t", "error");
      return;
    }

    const formattedData = orders.map((order: any, index: number) => {
      const itemList = order.items
        ?.map(
          (item: any) =>
            `${item.menuItem?.name || "T√™n m√≥n"} (x${item.quantity})${
              item.note ? ` - ${item.note}` : ""
            }`
        )
        .join("; ");

      return {
        STT: index + 1,
        B√†n: order.table?.name || "Kh√¥ng r√µ",
        Tr·∫°ng_th√°i: order.status,
        Ghi_ch√∫: order.note || "",
        Ng√†y_t·∫°o: new Date(order.createdAt).toLocaleString("vi-VN"),
        Danh_s√°ch_m√≥n: itemList,
        T·ªïng_ti·ªÅn: calculateTotal(order),
      };
    });

    const worksheet = XLSX.utils.json_to_sheet(formattedData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Th·ªëng k√™ ƒë∆°n h√†ng");

    const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
    const blob = new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, `orders-statistics-${new Date().toISOString().split("T")[0]}.xlsx`);
    showNotification("ƒê√£ xu·∫•t file Excel th√†nh c√¥ng!", "success");
  };

  const getStatusBadge = (status: string) => {
    const base = "px-3 py-1 rounded-full text-sm font-semibold";
    switch (status) {
      case "PENDING":
        return <span className={`${base} bg-yellow-100 text-yellow-700`}>ƒêang ch·ªù</span>;
      case "COOKING":
        return <span className={`${base} bg-blue-100 text-blue-700`}>ƒêang l√†m</span>;
      case "DONE":
        return <span className={`${base} bg-green-100 text-green-700`}>Ho√†n t·∫•t</span>;
      default:
        return <span className={`${base} bg-gray-100 text-gray-700`}>Kh√¥ng r√µ</span>;
    }
  };

  return (
    <div className="p-8">
      <NotificationComponent />
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-amber-600">üìä Th·ªëng k√™ ƒë∆°n h√†ng</h1>
        <div className="flex gap-3">
          <button
            onClick={fetchOrders}
            className="flex items-center gap-2 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-all"
          >
            <RefreshCw size={18} />
            L√†m m·ªõi
          </button>
          <button
            onClick={exportToExcel}
            className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-all"
          >
            <FileDown size={18} />
            Xu·∫•t Excel
          </button>
        </div>
      </div>

      {loading ? (
        <p className="text-center text-gray-500 animate-pulse">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : orders.length === 0 ? (
        <p className="text-center text-gray-400">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</p>
      ) : (
        <div className="overflow-x-auto rounded-xl shadow border border-gray-200 bg-white">
          <table className="min-w-full text-sm text-gray-700">
            <thead className="bg-gray-100 text-gray-800 text-left">
              <tr>
                <th className="px-4 py-3 border-b">#</th>
                <th className="px-4 py-3 border-b">B√†n</th>
                <th className="px-4 py-3 border-b">Tr·∫°ng th√°i</th>
                <th className="px-4 py-3 border-b">M√≥n ƒë√£ g·ªçi</th>
                <th className="px-4 py-3 border-b">Ghi ch√∫</th>
                <th className="px-4 py-3 border-b">Ng√†y t·∫°o</th>
                <th className="px-4 py-3 border-b text-right">T·ªïng ti·ªÅn</th>
              </tr>
            </thead>
            <tbody>
              {orders.map((order, index) => {
                const total = calculateTotal(order);
                return (
                  <tr
                    key={order.id}
                    className="hover:bg-gray-50 transition-all border-b last:border-0"
                  >
                    <td className="px-4 py-3">{index + 1}</td>
                    <td className="px-4 py-3 font-semibold">
                      {order.table?.name || "Kh√¥ng r√µ b√†n"}
                    </td>
                    <td className="px-4 py-3">{getStatusBadge(order.status)}</td>
                    <td className="px-4 py-3">
                      {order.items && order.items.length > 0 ? (
                        <ul className="list-disc list-inside space-y-1">
                          {order.items.map((item: any) => (
                            <li key={item.id}>
                              <span className="font-medium text-gray-800">
                                {item.menuItem?.name || "T√™n m√≥n"}
                              </span>{" "}
                              x{item.quantity}
                              {item.note && (
                                <span className="text-gray-500"> ‚Äî {item.note}</span>
                              )}
                            </li>
                          ))}
                        </ul>
                      ) : (
                        <span className="text-gray-400">Kh√¥ng c√≥ m√≥n</span>
                      )}
                    </td>
                    <td className="px-4 py-3 text-gray-600">{order.note || "‚Äî"}</td>
                    <td className="px-4 py-3">
                      {new Date(order.createdAt).toLocaleString("vi-VN")}
                    </td>
                    <td className="px-4 py-3 text-right font-semibold text-amber-600">
                      {total.toLocaleString("vi-VN")} ‚Ç´
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
